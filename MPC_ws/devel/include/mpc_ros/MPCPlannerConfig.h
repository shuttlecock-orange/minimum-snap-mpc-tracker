//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the mpc_ros package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __mpc_ros__MPCPLANNERCONFIG_H__
#define __mpc_ros__MPCPLANNERCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace mpc_ros
{
  class MPCPlannerConfigStatics;

  class MPCPlannerConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(MPCPlannerConfig &config, const MPCPlannerConfig &max, const MPCPlannerConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const MPCPlannerConfig &config1, const MPCPlannerConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, MPCPlannerConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const MPCPlannerConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, MPCPlannerConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const MPCPlannerConfig &config) const = 0;
      virtual void getValue(const MPCPlannerConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T MPCPlannerConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T MPCPlannerConfig::* field;

      virtual void clamp(MPCPlannerConfig &config, const MPCPlannerConfig &max, const MPCPlannerConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const MPCPlannerConfig &config1, const MPCPlannerConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, MPCPlannerConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const MPCPlannerConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, MPCPlannerConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const MPCPlannerConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const MPCPlannerConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, MPCPlannerConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, MPCPlannerConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<MPCPlannerConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(MPCPlannerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("max_vel_trans"==(*_i)->name){max_vel_trans = boost::any_cast<double>(val);}
        if("min_vel_trans"==(*_i)->name){min_vel_trans = boost::any_cast<double>(val);}
        if("max_vel_x"==(*_i)->name){max_vel_x = boost::any_cast<double>(val);}
        if("min_vel_x"==(*_i)->name){min_vel_x = boost::any_cast<double>(val);}
        if("max_vel_y"==(*_i)->name){max_vel_y = boost::any_cast<double>(val);}
        if("min_vel_y"==(*_i)->name){min_vel_y = boost::any_cast<double>(val);}
        if("max_vel_theta"==(*_i)->name){max_vel_theta = boost::any_cast<double>(val);}
        if("min_vel_theta"==(*_i)->name){min_vel_theta = boost::any_cast<double>(val);}
        if("acc_lim_x"==(*_i)->name){acc_lim_x = boost::any_cast<double>(val);}
        if("acc_lim_y"==(*_i)->name){acc_lim_y = boost::any_cast<double>(val);}
        if("acc_lim_theta"==(*_i)->name){acc_lim_theta = boost::any_cast<double>(val);}
        if("acc_lim_trans"==(*_i)->name){acc_lim_trans = boost::any_cast<double>(val);}
        if("prune_plan"==(*_i)->name){prune_plan = boost::any_cast<bool>(val);}
        if("xy_goal_tolerance"==(*_i)->name){xy_goal_tolerance = boost::any_cast<double>(val);}
        if("yaw_goal_tolerance"==(*_i)->name){yaw_goal_tolerance = boost::any_cast<double>(val);}
        if("trans_stopped_vel"==(*_i)->name){trans_stopped_vel = boost::any_cast<double>(val);}
        if("theta_stopped_vel"==(*_i)->name){theta_stopped_vel = boost::any_cast<double>(val);}
        if("debug_info"==(*_i)->name){debug_info = boost::any_cast<bool>(val);}
        if("delay_mode"==(*_i)->name){delay_mode = boost::any_cast<bool>(val);}
        if("max_speed"==(*_i)->name){max_speed = boost::any_cast<double>(val);}
        if("waypoints_dist"==(*_i)->name){waypoints_dist = boost::any_cast<double>(val);}
        if("path_length"==(*_i)->name){path_length = boost::any_cast<double>(val);}
        if("controller_freq"==(*_i)->name){controller_freq = boost::any_cast<double>(val);}
        if("steps"==(*_i)->name){steps = boost::any_cast<double>(val);}
        if("ref_cte"==(*_i)->name){ref_cte = boost::any_cast<double>(val);}
        if("ref_vel"==(*_i)->name){ref_vel = boost::any_cast<double>(val);}
        if("ref_etheta"==(*_i)->name){ref_etheta = boost::any_cast<double>(val);}
        if("w_cte"==(*_i)->name){w_cte = boost::any_cast<double>(val);}
        if("w_etheta"==(*_i)->name){w_etheta = boost::any_cast<double>(val);}
        if("w_vel"==(*_i)->name){w_vel = boost::any_cast<double>(val);}
        if("w_angvel"==(*_i)->name){w_angvel = boost::any_cast<double>(val);}
        if("w_angvel_d"==(*_i)->name){w_angvel_d = boost::any_cast<double>(val);}
        if("w_accel"==(*_i)->name){w_accel = boost::any_cast<double>(val);}
        if("w_accel_d"==(*_i)->name){w_accel_d = boost::any_cast<double>(val);}
        if("max_angvel"==(*_i)->name){max_angvel = boost::any_cast<double>(val);}
        if("max_throttle"==(*_i)->name){max_throttle = boost::any_cast<double>(val);}
        if("bound_value"==(*_i)->name){bound_value = boost::any_cast<double>(val);}
      }
    }

    double max_vel_trans;
double min_vel_trans;
double max_vel_x;
double min_vel_x;
double max_vel_y;
double min_vel_y;
double max_vel_theta;
double min_vel_theta;
double acc_lim_x;
double acc_lim_y;
double acc_lim_theta;
double acc_lim_trans;
bool prune_plan;
double xy_goal_tolerance;
double yaw_goal_tolerance;
double trans_stopped_vel;
double theta_stopped_vel;
bool debug_info;
bool delay_mode;
double max_speed;
double waypoints_dist;
double path_length;
double controller_freq;
double steps;
double ref_cte;
double ref_vel;
double ref_etheta;
double w_cte;
double w_etheta;
double w_vel;
double w_angvel;
double w_angvel_d;
double w_accel;
double w_accel_d;
double max_angvel;
double max_throttle;
double bound_value;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_vel_trans;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_vel_trans;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_vel_x;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_vel_x;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_vel_y;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_vel_y;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_vel_theta;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_vel_theta;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double acc_lim_x;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double acc_lim_y;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double acc_lim_theta;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double acc_lim_trans;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool prune_plan;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double xy_goal_tolerance;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double yaw_goal_tolerance;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double trans_stopped_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double theta_stopped_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool debug_info;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool delay_mode;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_speed;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double waypoints_dist;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double path_length;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double controller_freq;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double steps;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ref_cte;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ref_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ref_etheta;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double w_cte;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double w_etheta;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double w_vel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double w_angvel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double w_angvel_d;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double w_accel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double w_accel_d;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_angvel;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_throttle;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double bound_value;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("MPCPlannerConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const MPCPlannerConfig &__max__ = __getMax__();
      const MPCPlannerConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const MPCPlannerConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const MPCPlannerConfig &__getDefault__();
    static const MPCPlannerConfig &__getMax__();
    static const MPCPlannerConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const MPCPlannerConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void MPCPlannerConfig::ParamDescription<std::string>::clamp(MPCPlannerConfig &config, const MPCPlannerConfig &max, const MPCPlannerConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class MPCPlannerConfigStatics
  {
    friend class MPCPlannerConfig;

    MPCPlannerConfigStatics()
    {
MPCPlannerConfig::GroupDescription<MPCPlannerConfig::DEFAULT, MPCPlannerConfig> Default("Default", "", 0, 0, true, &MPCPlannerConfig::groups);
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_vel_trans = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_vel_trans = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_vel_trans = 0.55;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_vel_trans", "double", 0, "The absolute value of the maximum translational velocity for the robot in m/s", "", &MPCPlannerConfig::max_vel_trans)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_vel_trans", "double", 0, "The absolute value of the maximum translational velocity for the robot in m/s", "", &MPCPlannerConfig::max_vel_trans)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_vel_trans = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_vel_trans = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_vel_trans = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("min_vel_trans", "double", 0, "The absolute value of the minimum translational velocity for the robot in m/s", "", &MPCPlannerConfig::min_vel_trans)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("min_vel_trans", "double", 0, "The absolute value of the minimum translational velocity for the robot in m/s", "", &MPCPlannerConfig::min_vel_trans)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_vel_x = -std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_vel_x = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_vel_x = 0.55;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_vel_x", "double", 0, "The maximum x velocity for the robot in m/s", "", &MPCPlannerConfig::max_vel_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_vel_x", "double", 0, "The maximum x velocity for the robot in m/s", "", &MPCPlannerConfig::max_vel_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_vel_x = -std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_vel_x = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_vel_x = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("min_vel_x", "double", 0, "The minimum x velocity for the robot in m/s", "", &MPCPlannerConfig::min_vel_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("min_vel_x", "double", 0, "The minimum x velocity for the robot in m/s", "", &MPCPlannerConfig::min_vel_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_vel_y = -std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_vel_y = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_vel_y = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_vel_y", "double", 0, "The maximum y velocity for the robot in m/s", "", &MPCPlannerConfig::max_vel_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_vel_y", "double", 0, "The maximum y velocity for the robot in m/s", "", &MPCPlannerConfig::max_vel_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_vel_y = -std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_vel_y = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_vel_y = -0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("min_vel_y", "double", 0, "The minimum y velocity for the robot in m/s", "", &MPCPlannerConfig::min_vel_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("min_vel_y", "double", 0, "The minimum y velocity for the robot in m/s", "", &MPCPlannerConfig::min_vel_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_vel_theta = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_vel_theta = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_vel_theta = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_vel_theta", "double", 0, "The absolute value of the maximum rotational velocity for the robot in rad/s", "", &MPCPlannerConfig::max_vel_theta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_vel_theta", "double", 0, "The absolute value of the maximum rotational velocity for the robot in rad/s", "", &MPCPlannerConfig::max_vel_theta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_vel_theta = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_vel_theta = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_vel_theta = 0.4;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("min_vel_theta", "double", 0, "The absolute value of the minimum rotational velocity for the robot in rad/s", "", &MPCPlannerConfig::min_vel_theta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("min_vel_theta", "double", 0, "The absolute value of the minimum rotational velocity for the robot in rad/s", "", &MPCPlannerConfig::min_vel_theta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acc_lim_x = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acc_lim_x = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acc_lim_x = 2.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("acc_lim_x", "double", 0, "The acceleration limit of the robot in the x direction", "", &MPCPlannerConfig::acc_lim_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("acc_lim_x", "double", 0, "The acceleration limit of the robot in the x direction", "", &MPCPlannerConfig::acc_lim_x)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acc_lim_y = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acc_lim_y = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acc_lim_y = 2.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("acc_lim_y", "double", 0, "The acceleration limit of the robot in the y direction", "", &MPCPlannerConfig::acc_lim_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("acc_lim_y", "double", 0, "The acceleration limit of the robot in the y direction", "", &MPCPlannerConfig::acc_lim_y)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acc_lim_theta = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acc_lim_theta = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acc_lim_theta = 3.2;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("acc_lim_theta", "double", 0, "The acceleration limit of the robot in the theta direction", "", &MPCPlannerConfig::acc_lim_theta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("acc_lim_theta", "double", 0, "The acceleration limit of the robot in the theta direction", "", &MPCPlannerConfig::acc_lim_theta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acc_lim_trans = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acc_lim_trans = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acc_lim_trans = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("acc_lim_trans", "double", 0, "The absolute value of the maximum translational acceleration for the robot in m/s^2", "", &MPCPlannerConfig::acc_lim_trans)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("acc_lim_trans", "double", 0, "The absolute value of the maximum translational acceleration for the robot in m/s^2", "", &MPCPlannerConfig::acc_lim_trans)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.prune_plan = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.prune_plan = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.prune_plan = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<bool>("prune_plan", "bool", 0, "Start following closest point of global plan, not first point (if different).", "", &MPCPlannerConfig::prune_plan)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<bool>("prune_plan", "bool", 0, "Start following closest point of global plan, not first point (if different).", "", &MPCPlannerConfig::prune_plan)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.xy_goal_tolerance = -std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.xy_goal_tolerance = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.xy_goal_tolerance = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("xy_goal_tolerance", "double", 0, "Within what maximum distance we consider the robot to be in goal", "", &MPCPlannerConfig::xy_goal_tolerance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("xy_goal_tolerance", "double", 0, "Within what maximum distance we consider the robot to be in goal", "", &MPCPlannerConfig::xy_goal_tolerance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.yaw_goal_tolerance = -std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.yaw_goal_tolerance = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.yaw_goal_tolerance = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("yaw_goal_tolerance", "double", 0, "Within what maximum angle difference we consider the robot to face goal direction", "", &MPCPlannerConfig::yaw_goal_tolerance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("yaw_goal_tolerance", "double", 0, "Within what maximum angle difference we consider the robot to face goal direction", "", &MPCPlannerConfig::yaw_goal_tolerance)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trans_stopped_vel = -std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trans_stopped_vel = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trans_stopped_vel = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("trans_stopped_vel", "double", 0, "Below what maximum velocity we consider the robot to be stopped in translation", "", &MPCPlannerConfig::trans_stopped_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("trans_stopped_vel", "double", 0, "Below what maximum velocity we consider the robot to be stopped in translation", "", &MPCPlannerConfig::trans_stopped_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.theta_stopped_vel = -std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.theta_stopped_vel = std::numeric_limits<double>::infinity();
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.theta_stopped_vel = 0.1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("theta_stopped_vel", "double", 0, "Below what maximum rotation velocity we consider the robot to be stopped in rotation", "", &MPCPlannerConfig::theta_stopped_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("theta_stopped_vel", "double", 0, "Below what maximum rotation velocity we consider the robot to be stopped in rotation", "", &MPCPlannerConfig::theta_stopped_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.debug_info = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.debug_info = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.debug_info = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<bool>("debug_info", "bool", 0, "Debug information", "", &MPCPlannerConfig::debug_info)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<bool>("debug_info", "bool", 0, "Debug information", "", &MPCPlannerConfig::debug_info)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.delay_mode = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.delay_mode = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.delay_mode = 1;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<bool>("delay_mode", "bool", 0, "Delay mode", "", &MPCPlannerConfig::delay_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<bool>("delay_mode", "bool", 0, "Delay mode", "", &MPCPlannerConfig::delay_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_speed = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_speed = 5.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_speed = 0.5;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_speed", "double", 0, "Maximum speed [m/s]", "", &MPCPlannerConfig::max_speed)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_speed", "double", 0, "Maximum speed [m/s]", "", &MPCPlannerConfig::max_speed)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.waypoints_dist = -1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.waypoints_dist = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.waypoints_dist = -1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("waypoints_dist", "double", 0, "Waypoint distance [m]", "", &MPCPlannerConfig::waypoints_dist)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("waypoints_dist", "double", 0, "Waypoint distance [m]", "", &MPCPlannerConfig::waypoints_dist)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.path_length = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.path_length = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.path_length = 5.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("path_length", "double", 0, "Path length [m]", "", &MPCPlannerConfig::path_length)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("path_length", "double", 0, "Path length [m]", "", &MPCPlannerConfig::path_length)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.controller_freq = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.controller_freq = 100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.controller_freq = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("controller_freq", "double", 0, "Controller Frequency", "", &MPCPlannerConfig::controller_freq)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("controller_freq", "double", 0, "Controller Frequency", "", &MPCPlannerConfig::controller_freq)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.steps = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.steps = 100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.steps = 20.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("steps", "double", 0, "Steps", "", &MPCPlannerConfig::steps)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("steps", "double", 0, "Steps", "", &MPCPlannerConfig::steps)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ref_cte = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ref_cte = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ref_cte = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("ref_cte", "double", 0, "Reference Cross Track Error", "", &MPCPlannerConfig::ref_cte)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("ref_cte", "double", 0, "Reference Cross Track Error", "", &MPCPlannerConfig::ref_cte)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ref_vel = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ref_vel = 5.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ref_vel = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("ref_vel", "double", 0, "Reference Velocity", "", &MPCPlannerConfig::ref_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("ref_vel", "double", 0, "Reference Velocity", "", &MPCPlannerConfig::ref_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ref_etheta = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ref_etheta = 5.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ref_etheta = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("ref_etheta", "double", 0, "Reference Error theta", "", &MPCPlannerConfig::ref_etheta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("ref_etheta", "double", 0, "Reference Error theta", "", &MPCPlannerConfig::ref_etheta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.w_cte = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.w_cte = 5000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.w_cte = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_cte", "double", 0, "Weight of Cross Track Error", "", &MPCPlannerConfig::w_cte)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_cte", "double", 0, "Weight of Cross Track Error", "", &MPCPlannerConfig::w_cte)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.w_etheta = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.w_etheta = 5000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.w_etheta = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_etheta", "double", 0, "Weight of Error Theta", "", &MPCPlannerConfig::w_etheta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_etheta", "double", 0, "Weight of Error Theta", "", &MPCPlannerConfig::w_etheta)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.w_vel = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.w_vel = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.w_vel = 100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_vel", "double", 0, "Weight of Velocity", "", &MPCPlannerConfig::w_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_vel", "double", 0, "Weight of Velocity", "", &MPCPlannerConfig::w_vel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.w_angvel = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.w_angvel = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.w_angvel = 100.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_angvel", "double", 0, "Weight of Angular velocity", "", &MPCPlannerConfig::w_angvel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_angvel", "double", 0, "Weight of Angular velocity", "", &MPCPlannerConfig::w_angvel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.w_angvel_d = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.w_angvel_d = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.w_angvel_d = 0.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_angvel_d", "double", 0, "Weight of Angular velocity difference", "", &MPCPlannerConfig::w_angvel_d)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_angvel_d", "double", 0, "Weight of Angular velocity difference", "", &MPCPlannerConfig::w_angvel_d)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.w_accel = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.w_accel = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.w_accel = 50.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_accel", "double", 0, "Weight of Acceleration", "", &MPCPlannerConfig::w_accel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_accel", "double", 0, "Weight of Acceleration", "", &MPCPlannerConfig::w_accel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.w_accel_d = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.w_accel_d = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.w_accel_d = 10.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_accel_d", "double", 0, "Weight of Acceleration difference", "", &MPCPlannerConfig::w_accel_d)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("w_accel_d", "double", 0, "Weight of Acceleration difference", "", &MPCPlannerConfig::w_accel_d)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_angvel = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_angvel = 5.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_angvel = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_angvel", "double", 0, "Maximum Angular velocity", "", &MPCPlannerConfig::max_angvel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_angvel", "double", 0, "Maximum Angular velocity", "", &MPCPlannerConfig::max_angvel)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_throttle = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_throttle = 5.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_throttle = 1.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_throttle", "double", 0, "Maximum Throttle", "", &MPCPlannerConfig::max_throttle)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("max_throttle", "double", 0, "Maximum Throttle", "", &MPCPlannerConfig::max_throttle)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.bound_value = 0.01;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.bound_value = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.bound_value = 1000.0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("bound_value", "double", 0, "Bound value", "", &MPCPlannerConfig::bound_value)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(MPCPlannerConfig::AbstractParamDescriptionConstPtr(new MPCPlannerConfig::ParamDescription<double>("bound_value", "double", 0, "Bound value", "", &MPCPlannerConfig::bound_value)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(MPCPlannerConfig::AbstractGroupDescriptionConstPtr(new MPCPlannerConfig::GroupDescription<MPCPlannerConfig::DEFAULT, MPCPlannerConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<MPCPlannerConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<MPCPlannerConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<MPCPlannerConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    MPCPlannerConfig __max__;
    MPCPlannerConfig __min__;
    MPCPlannerConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const MPCPlannerConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static MPCPlannerConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &MPCPlannerConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const MPCPlannerConfig &MPCPlannerConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const MPCPlannerConfig &MPCPlannerConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const MPCPlannerConfig &MPCPlannerConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<MPCPlannerConfig::AbstractParamDescriptionConstPtr> &MPCPlannerConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<MPCPlannerConfig::AbstractGroupDescriptionConstPtr> &MPCPlannerConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const MPCPlannerConfigStatics *MPCPlannerConfig::__get_statics__()
  {
    const static MPCPlannerConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = MPCPlannerConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __MPCPLANNERRECONFIGURATOR_H__
